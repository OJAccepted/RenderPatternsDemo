{"ast":null,"code":"import _slicedToArray from \"/Users/bytedance/Desktop/backup/other/49kyir/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bytedance/Desktop/backup/other/49kyir/src/App.js\";\nimport React from \"react\";\n\n// This is a setup function that simulates client/server setup.\n// On the server, it simulates Sidebar and Content being available right away.\n// On the client, it simulates them resolving over network (when you press a button).\nexport default function getApp( /** 是否模拟网络，为true就是客户端 */\nisSimulatingNetwork) {\n  var Sidebar;\n  var Content;\n  if (isSimulatingNetwork) {\n    // 客户端\n    // Artificially delay the components, as if we fetch code over network.\n    Sidebar = React.lazy(function () {\n      return new Promise(function (resolve) {\n        // Triggered from buttons in public/index.html\n        window.resolveSidebar = function () {\n          // resolve({ default: RealSidebar });\n          doClientRender();\n        };\n      });\n    });\n    Content = React.lazy(function () {\n      return new Promise(function (resolve) {\n        // Triggered from buttons in public/index.html\n        window.resolveContent = function () {\n          // resolve({ default: RealContent });\n          doClientRender();\n        };\n      });\n    });\n  } else {\n    // 服务端\n    // On the server, we have the components ready right away.\n    Sidebar = RealSidebar;\n    Content = RealContent;\n  }\n  function RealSidebar() {\n    var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      count = _React$useState2[0],\n      setCount = _React$useState2[1];\n    var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      didHydrate = _React$useState4[0],\n      setDidHydrate = _React$useState4[1];\n    React.useEffect(function () {\n      // Make it easy to see when the code has loaded.\n      setDidHydrate(true);\n    }, []);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        background: didHydrate ? \"rgba(0, 255, 0, 0.1)\" : \"rgba(255, 0, 0, 0.1)\",\n        border: \"1px solid grey\",\n        margin: 10,\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"Sidebar (\", didHydrate ? \"Hydrated with JS\" : \"Initial HTML\", \")\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return setCount(function (c) {\n          return c + 1;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, \"Clicked on sidebar \", count, \" times\"));\n  }\n  function RealContent() {\n    var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      count = _React$useState6[0],\n      setCount = _React$useState6[1];\n    var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      didHydrate = _React$useState8[0],\n      setDidHydrate = _React$useState8[1];\n    React.useEffect(function () {\n      // Make it easy to see when the code has loaded.\n      setDidHydrate(true);\n    }, []);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        background: didHydrate ? \"rgba(0, 255, 0, 0.1)\" : \"rgba(255, 0, 0, 0.1)\",\n        border: \"1px solid grey\",\n        margin: 10,\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"Content (\", didHydrate ? \"Hydrated with JS\" : \"Initial HTML\", \")\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return setCount(function (c) {\n          return c + 1;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, \"Clicked on content \", count, \" times\"));\n  }\n  function App() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        border: \"1px solid grey\",\n        margin: 10,\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, \"React Progressive Hydration Demo*\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, \"* very experimental \\u2014 likely contains bugs.\")), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, \"This app is server-rendered to HTML.\", \" \", \"Concurrent Mode lets us hydrate parts of UI without waiting for \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 34\n      }\n    }, \"all\"), \" JS to load.\"), /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }\n      }, \"Loading sidebar...\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }\n      }, \"Loading content...\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    })));\n  }\n  return App;\n}\nfunction doClientRender() {\n  var App = getApp(\n  // Make Content and Sidebar code unavailable on first\n  // client-side render, as if they're still loading over network.\n  true);\n  var rootElement = document.getElementById(\"root\");\n  // Start hydrating the app. Note that in Concurrent Mode,\n  // we don't need *all* code to be loaded. Notice how if\n  // you press \"Load Sidebar JS code\", you can interact\n  // with the Sidebar even though the Content component\n  // hasn't loaded its code yet.\n  ReactDOM.createRoot(rootElement, {\n    hydrate: true\n  }).render( /*#__PURE__*/React.createElement(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"names":["React","getApp","isSimulatingNetwork","Sidebar","Content","lazy","Promise","resolve","window","resolveSidebar","doClientRender","resolveContent","RealSidebar","RealContent","useState","count","setCount","didHydrate","setDidHydrate","useEffect","background","border","margin","padding","c","App","rootElement","document","getElementById","ReactDOM","createRoot","hydrate","render"],"sources":["/Users/bytedance/Desktop/backup/other/49kyir/src/App.js"],"sourcesContent":["import React from \"react\";\n\n// This is a setup function that simulates client/server setup.\n// On the server, it simulates Sidebar and Content being available right away.\n// On the client, it simulates them resolving over network (when you press a button).\nexport default function getApp(\n  /** 是否模拟网络，为true就是客户端 */\n  isSimulatingNetwork\n) {\n  let Sidebar;\n  let Content;\n  if (isSimulatingNetwork) {\n    // 客户端\n    // Artificially delay the components, as if we fetch code over network.\n    Sidebar = React.lazy(\n      () =>\n        new Promise(resolve => {\n          // Triggered from buttons in public/index.html\n          window.resolveSidebar = () => {\n            // resolve({ default: RealSidebar });\n            doClientRender()\n          };\n        })\n    );\n    Content = React.lazy(\n      () =>\n        new Promise(resolve => {\n          // Triggered from buttons in public/index.html\n          window.resolveContent = () => {\n            // resolve({ default: RealContent });\n            doClientRender()\n          };\n        })\n    );\n  } else {\n    // 服务端\n    // On the server, we have the components ready right away.\n    Sidebar = RealSidebar;\n    Content = RealContent;\n  }\n\n  function RealSidebar() {\n    const [count, setCount] = React.useState(0);\n    const [\n      didHydrate,\n      setDidHydrate\n    ] = React.useState(false);\n    React.useEffect(() => {\n      // Make it easy to see when the code has loaded.\n      setDidHydrate(true);\n    }, []);\n    return (\n      <div\n        style={{\n          background: didHydrate\n            ? \"rgba(0, 255, 0, 0.1)\"\n            : \"rgba(255, 0, 0, 0.1)\",\n          border: \"1px solid grey\",\n          margin: 10,\n          padding: 10\n        }}\n      >\n        <h1>\n          Sidebar (\n          {didHydrate\n            ? \"Hydrated with JS\"\n            : \"Initial HTML\"}\n          )\n        </h1>\n        <button\n          onClick={() => setCount(c => c + 1)}\n        >\n          Clicked on sidebar {count} times\n        </button>\n      </div>\n    );\n  }\n\n  function RealContent() {\n    const [count, setCount] = React.useState(0);\n    const [\n      didHydrate,\n      setDidHydrate\n    ] = React.useState(false);\n    React.useEffect(() => {\n      // Make it easy to see when the code has loaded.\n      setDidHydrate(true);\n    }, []);\n    return (\n      <div\n        style={{\n          background: didHydrate\n            ? \"rgba(0, 255, 0, 0.1)\"\n            : \"rgba(255, 0, 0, 0.1)\",\n          border: \"1px solid grey\",\n          margin: 10,\n          padding: 10\n        }}\n      >\n        <h1>\n          Content (\n          {didHydrate\n            ? \"Hydrated with JS\"\n            : \"Initial HTML\"}\n          )\n        </h1>\n        <button\n          onClick={() => setCount(c => c + 1)}\n        >\n          Clicked on content {count} times\n        </button>\n      </div>\n    );\n  }\n\n  function App() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          border: \"1px solid grey\",\n          margin: 10,\n          padding: 10\n        }}\n      >\n        <h1>React Progressive Hydration Demo*</h1>\n        <h3>\n          <i>\n            * very experimental — likely contains\n            bugs.\n          </i>\n        </h3>\n        <h2>\n          This app is server-rendered to HTML.{\" \"}\n          Concurrent Mode lets us hydrate parts of\n          UI without waiting for <i>all</i> JS to\n          load.\n        </h2>\n        <React.Suspense\n          fallback={<h2>Loading sidebar...</h2>}\n        >\n          <Sidebar />\n        </React.Suspense>\n        <br />\n        <React.Suspense\n          fallback={<h2>Loading content...</h2>}\n        >\n          <Content />\n        </React.Suspense>\n      </div>\n    );\n  }\n\n  return App;\n}\n\n\nfunction doClientRender() {\n  const App = getApp(\n    // Make Content and Sidebar code unavailable on first\n    // client-side render, as if they're still loading over network.\n    true\n  );\n  const rootElement = document.getElementById(\"root\");\n  // Start hydrating the app. Note that in Concurrent Mode,\n  // we don't need *all* code to be loaded. Notice how if\n  // you press \"Load Sidebar JS code\", you can interact\n  // with the Sidebar even though the Content component\n  // hasn't loaded its code yet.\n  ReactDOM.createRoot(rootElement, {\n    hydrate: true\n  }).render(<App />);\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA,eAAe,SAASC,MAAM,EAC5B;AACAC,mBAAmB,EACnB;EACA,IAAIC,OAAO;EACX,IAAIC,OAAO;EACX,IAAIF,mBAAmB,EAAE;IACvB;IACA;IACAC,OAAO,GAAGH,KAAK,CAACK,IAAI,CAClB;MAAA,OACE,IAAIC,OAAO,CAAC,UAAAC,OAAO,EAAI;QACrB;QACAC,MAAM,CAACC,cAAc,GAAG,YAAM;UAC5B;UACAC,cAAc,EAAE;QAClB,CAAC;MACH,CAAC,CAAC;IAAA,EACL;IACDN,OAAO,GAAGJ,KAAK,CAACK,IAAI,CAClB;MAAA,OACE,IAAIC,OAAO,CAAC,UAAAC,OAAO,EAAI;QACrB;QACAC,MAAM,CAACG,cAAc,GAAG,YAAM;UAC5B;UACAD,cAAc,EAAE;QAClB,CAAC;MACH,CAAC,CAAC;IAAA,EACL;EACH,CAAC,MAAM;IACL;IACA;IACAP,OAAO,GAAGS,WAAW;IACrBR,OAAO,GAAGS,WAAW;EACvB;EAEA,SAASD,WAAW,GAAG;IACrB,sBAA0BZ,KAAK,CAACc,QAAQ,CAAC,CAAC,CAAC;MAAA;MAApCC,KAAK;MAAEC,QAAQ;IACtB,uBAGIhB,KAAK,CAACc,QAAQ,CAAC,KAAK,CAAC;MAAA;MAFvBG,UAAU;MACVC,aAAa;IAEflB,KAAK,CAACmB,SAAS,CAAC,YAAM;MACpB;MACAD,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,EAAE,EAAE,CAAC;IACN,oBACE;MACE,KAAK,EAAE;QACLE,UAAU,EAAEH,UAAU,GAClB,sBAAsB,GACtB,sBAAsB;QAC1BI,MAAM,EAAE,gBAAgB;QACxBC,MAAM,EAAE,EAAE;QACVC,OAAO,EAAE;MACX,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAEF;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI,WAEF,EAACN,UAAU,GACP,kBAAkB,GAClB,cAAc,EAAC,GAErB,CAAK,eACL;MACE,OAAO,EAAE;QAAA,OAAMD,QAAQ,CAAC,UAAAQ,CAAC;UAAA,OAAIA,CAAC,GAAG,CAAC;QAAA,EAAC;MAAA,CAAC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACrC,qBACoB,EAACT,KAAK,EAAC,QAC5B,CAAS,CACL;EAEV;EAEA,SAASF,WAAW,GAAG;IACrB,uBAA0Bb,KAAK,CAACc,QAAQ,CAAC,CAAC,CAAC;MAAA;MAApCC,KAAK;MAAEC,QAAQ;IACtB,uBAGIhB,KAAK,CAACc,QAAQ,CAAC,KAAK,CAAC;MAAA;MAFvBG,UAAU;MACVC,aAAa;IAEflB,KAAK,CAACmB,SAAS,CAAC,YAAM;MACpB;MACAD,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,EAAE,EAAE,CAAC;IACN,oBACE;MACE,KAAK,EAAE;QACLE,UAAU,EAAEH,UAAU,GAClB,sBAAsB,GACtB,sBAAsB;QAC1BI,MAAM,EAAE,gBAAgB;QACxBC,MAAM,EAAE,EAAE;QACVC,OAAO,EAAE;MACX,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAEF;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI,WAEF,EAACN,UAAU,GACP,kBAAkB,GAClB,cAAc,EAAC,GAErB,CAAK,eACL;MACE,OAAO,EAAE;QAAA,OAAMD,QAAQ,CAAC,UAAAQ,CAAC;UAAA,OAAIA,CAAC,GAAG,CAAC;QAAA,EAAC;MAAA,CAAC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACrC,qBACoB,EAACT,KAAK,EAAC,QAC5B,CAAS,CACL;EAEV;EAEA,SAASU,GAAG,GAAG;IACb,oBACE;MACE,SAAS,EAAC,KAAK;MACf,KAAK,EAAE;QACLJ,MAAM,EAAE,gBAAgB;QACxBC,MAAM,EAAE,EAAE;QACVC,OAAO,EAAE;MACX,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAEF;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI,mCAAiC,CAAK,eAC1C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAG,kDAGH,CAAI,CACD,eACL;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI,sCACkC,EAAC,GAAG,EAAC,kEAElB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAG,KAAG,CAAI,gBAEnC,CAAK,eACL,oBAAC,KAAK,CAAC,QAAQ;MACb,QAAQ,eAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAI,oBAAkB,CAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAEtC,oBAAC,OAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACI,eACjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAM,eACN,oBAAC,KAAK,CAAC,QAAQ;MACb,QAAQ,eAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAI,oBAAkB,CAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAEtC,oBAAC,OAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACI,CACb;EAEV;EAEA,OAAOE,GAAG;AACZ;AAGA,SAASf,cAAc,GAAG;EACxB,IAAMe,GAAG,GAAGxB,MAAM;EAChB;EACA;EACA,IAAI,CACL;EACD,IAAMyB,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;EACnD;EACA;EACA;EACA;EACA;EACAC,QAAQ,CAACC,UAAU,CAACJ,WAAW,EAAE;IAC/BK,OAAO,EAAE;EACX,CAAC,CAAC,CAACC,MAAM,eAAC,oBAAC,GAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAAC;AACpB"},"metadata":{},"sourceType":"module"}